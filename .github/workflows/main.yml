name: Build job

on:
  push:
  workflow_dispatch:  

jobs:
  build:
    name: mgba appimage
    runs-on: ubuntu-18.04

    steps:
      - uses: actions/checkout@v2

      - name: Install Packages
        continue-on-error: true
        id: packages
        run: |
          sudo apt-get install --no-install-recommends -y ccache cmake \
          git libavcodec-dev libavfilter-dev libavformat-dev libavresample-dev \
          libavutil-dev libcmocka-dev libedit-dev libelf-dev libminizip-dev \
          libqt5opengl5-dev libsdl2-dev libswscale-dev \
          libzip-dev qtmultimedia5-dev qttools5-dev qttools5-dev-tools zipcmp zipmerge ziptool
      - name: Install Packages if failed
        id: packages2
        if: steps.packages.outcome=='failure'
        run: |
          sudo apt-get update && sudo apt-get install -y --no-install-recommends build-essential ccache cmake \
          git libavcodec-dev libavfilter-dev libavformat-dev libavresample-dev \
          libavutil-dev libcmocka-dev libedit-dev libelf-dev libminizip-dev libpng-dev \
          libqt5opengl5-dev libsdl2-dev libsqlite3-dev libswscale-dev \
          libzip-dev qtmultimedia5-dev qttools5-dev qttools5-dev-tools zipcmp zipmerge ziptool
      - name: Build
        id: build
        run: |
            mkdir build
            cd build
            cmake -DCMAKE_INSTALL_PREFIX:PATH=/usr ..
            make
            ls -al .
            ls -al qt/
      - name: Package
        run: |
          ls -al ${pwd}
          QT_BASE_DIR=/usr/
          export QTDIR=$QT_BASE_DIR
          export PATH=$QT_BASE_DIR/bin:$PATH
          export LD_LIBRARY_PATH=$QT_BASE_DIR/lib/x86_64-linux-gnu:$QT_BASE_DIR/lib:$LD_LIBRARY_PATH
          export PKG_CONFIG_PATH=$QT_BASE_DIR/lib/pkgconfig:$PKG_CONFIG_PATH
          BUILDPATH=$GITHUB_WORKSPACE/build
          BUILDBIN=$BUILDPATH/qt/mgba-qt
          cd /tmp
          curl -sSfLO "https://github.com/probonopd/linuxdeployqt/releases/download/continuous/linuxdeployqt-continuous-x86_64.AppImage"
          chmod a+x linuxdeployqt*.AppImage
          ./linuxdeployqt-continuous-x86_64.AppImage --appimage-extract
          cd $GITHUB_WORKSPACE
          mkdir -p squashfs-root/usr/bin
          cp -P "$BUILDBIN" ./squashfs-root/usr/bin/
          cp $GITHUB_WORKSPACE/res/mgba-256.png ./squashfs-root/mgba.png
          cp $GITHUB_WORKSPACE/res/mgba-qt.desktop ./squashfs-root/mgba.desktop 
          curl -sSfL https://github.com/AppImage/AppImageKit/releases/download/continuous/runtime-x86_64 -o ./squashfs-root/runtime
          mkdir -p squashfs-root/usr/share/applications && cp ./squashfs-root/mgba.desktop ./squashfs-root/usr/share/applications
          mkdir -p squashfs-root/usr/share/icons && cp ./squashfs-root/mgba.png ./squashfs-root/usr/share/icons
          mkdir -p squashfs-root/usr/share/icons/hicolor/scalable/apps && cp ./squashfs-root/mgba.png ./squashfs-root/usr/share/icons/hicolor/scalable/apps
          mkdir -p squashfs-root/usr/share/pixmaps && cp ./squashfs-root/mgba.png ./squashfs-root/usr/share/pixmaps
          mkdir -p squashfs-root/usr/lib/
          curl -sSfL "https://github.com/AppImage/AppImageKit/releases/download/continuous/AppRun-x86_64" -o $GITHUB_WORKSPACE/squashfs-root/AppRun
          chmod a+x ./squashfs-root/AppRun
          chmod a+x ./squashfs-root/runtime
          echo "$name" > $GITHUB_WORKSPACE/squashfs-root/version.txt
          /tmp/squashfs-root/AppRun $GITHUB_WORKSPACE/squashfs-root/usr/bin/mgba-qt -appimage -unsupported-allow-new-glibc -no-copy-copyright-files -no-translations -bundle-non-qt-libs
          mkdir artifacts/
          cp ./mgba-*.AppImage artifacts/
      - name: Upload
        run: |
            ls -al artifacts/
            wget -c https://github.com/tcnksm/ghr/releases/download/v0.13.0/ghr_v0.13.0_linux_amd64.tar.gz
            tar xfv ghr_v0.13.0_linux_amd64.tar.gz
            ghr_v0.13.0_linux_amd64/ghr -u qurious-pixel -r mgba -recreate -n 'Continuous build' -b "Ryujinx Build $name runs/$name" continuous artifacts/
        env:
          DEFAULT_BRANCH: appimage
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
      - name: Upload artifact
        uses: actions/upload-artifact@v2
        with:
          name: mgba-appimage
          path: artifacts
